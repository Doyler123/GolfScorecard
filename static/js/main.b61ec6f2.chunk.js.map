{"version":3,"sources":["components/scorecard/ScorecardView.js","data/testGolfClub.js","components/scorecard/index.js","App.js","serviceWorker.js","index.js"],"names":["ScorecardView","courseData","handicap","onChangeHandicap","playerName","setPlayerName","updateScore","calculateTotal","onFocus","handleEnter","className","onKeyDown","value","placeholder","onChange","event","target","type","holes","slice","map","hole","index","key","par","score","points","name","Scorecard","useState","testGolfClub","setCourseData","setHandicap","useEffect","calculatePoints","hcap","parseInt","shotsOnHole","isNaN","holeIndex","prop","total","reduce","select","keyCode","form","Array","prototype","indexOf","call","elements","focus","preventDefault","App","style","padding","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b61ec6f2.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../../styles/scorecard.css';\r\n\r\n\r\nconst ScorecardView = ({courseData, handicap, onChangeHandicap, playerName, setPlayerName, updateScore, calculateTotal, onFocus, handleEnter}) => {\r\n    \r\n    return(\r\n        <form>\r\n            <div className=\"nine\">\r\n                <div className=\"line\">\r\n                    <span className=\"name\">\r\n                        <input onKeyDown={handleEnter} onFocus={onFocus} value={playerName} placeholder=\"Player Name\" className=\"name-box\" onChange={(event) => setPlayerName(event.target.value)}/>\r\n                    </span>\r\n                    <span className=\"hcap\">Hcap:</span>\r\n                    <span className=\"hcap\">\r\n                        <input onKeyDown={handleEnter} onFocus={onFocus} value={handicap} placeholder=\"-\" type=\"number\" className=\"score-box\" onChange={onChangeHandicap}/>\r\n                    </span>\r\n                </div>\r\n                <div className=\"line\">\r\n                    <span className=\"hole\">Hole</span>\r\n                    <span className=\"par\">Par</span>\r\n                    <span className=\"index\">Index</span>\r\n                    <span className=\"score\">Net</span>\r\n                    <span className=\"points\">S/F</span>\r\n                </div>\r\n\r\n                {courseData.holes.slice(0, 9).map((hole, index) => \r\n                    <div className=\"line\" key={hole.hole} >\r\n                        <span className=\"hole\">{hole.hole}</span>\r\n                        <span className=\"par\">{hole.par}</span>\r\n                        <span className=\"index\">{hole.index}</span>\r\n                        <span className=\"score\">\r\n                            <input onKeyDown={handleEnter} onFocus={onFocus} value={hole.score ? hole.score : \"\"} type=\"number\" className=\"score-box\" onChange={(event) => updateScore((hole.hole - 1), event.target.value)}/>\r\n                        </span>\r\n                        <span className=\"points\">{hole.points ? hole.points : \"-\"}</span>\r\n                    </div>    \r\n                )}\r\n                \r\n                <div className=\"line\">\r\n                    <span className=\"hole\">Out</span>\r\n                    <span className=\"par\">36</span>\r\n                    <span className=\"index\">&nbsp;</span>\r\n                    <span className=\"score\">{calculateTotal(courseData.holes.slice(0, 9), 'score')}</span>\r\n                    <span className=\"points\">{calculateTotal(courseData.holes.slice(0, 9), 'points')}</span>\r\n                </div>\r\n            </div>\r\n            <div className=\"nine\">\r\n                <div className=\"line\">\r\n                    <span className=\"hole\">Hole</span>\r\n                    <span className=\"par\">Par</span>\r\n                    <span className=\"index\">Index</span>\r\n                    <span className=\"score\">Net</span>\r\n                    <span className=\"points\">S/F</span>\r\n                </div>\r\n\r\n                {courseData.holes.slice(9, 18).map((hole, index) => \r\n                    <div className=\"line\" key={hole.hole} >\r\n                        <span className=\"hole\">{hole.hole}</span>\r\n                        <span className=\"par\">{hole.par}</span>\r\n                        <span className=\"index\">{hole.index}</span>\r\n                        <span className=\"score\">\r\n                            <input onKeyDown={handleEnter} onFocus={onFocus} value={hole.score ? hole.score : \"\"} type=\"number\" className=\"score-box\" onChange={(event) => updateScore((hole.hole - 1), event.target.value)}/>\r\n                        </span>\r\n                        <span className=\"points\">{hole.points ? hole.points : \"-\"}</span>\r\n                    </div>    \r\n                )}\r\n\r\n                <div className=\"line\">\r\n                    <span className=\"hole\">In</span>\r\n                    <span className=\"par\">36</span>\r\n                    <span className=\"index\">&nbsp;</span>\r\n                    <span className=\"score\">{calculateTotal(courseData.holes.slice(0, 9), 'score')}</span>\r\n                    <span className=\"points\">{calculateTotal(courseData.holes.slice(0, 9), 'points')}</span>\r\n                </div>\r\n                <div className=\"line\">\r\n                    <span className=\"hole\">Total</span>\r\n                    <span className=\"par\">72</span>\r\n                    <span className=\"index\">&nbsp;</span>\r\n                    <span className=\"score\">{calculateTotal(courseData.holes, 'score')}</span>\r\n                    <span className=\"points\">{calculateTotal(courseData.holes, 'points')}</span>\r\n                </div>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n\r\n\r\nexport default ScorecardView;","export default {\r\n    name: 'Test Golf Club',\r\n    holes: [\r\n        {\r\n            hole: 1,\r\n            par: 4,\r\n            index: 6\r\n        },\r\n        {\r\n            hole: 2,\r\n            par: 5,\r\n            index: 12\r\n        },\r\n        {\r\n            hole: 3,\r\n            par: 4,\r\n            index: 8\r\n        },\r\n        {\r\n            hole: 4,\r\n            par: 3,\r\n            index: 18\r\n        },\r\n        {\r\n            hole: 5,\r\n            par: 4,\r\n            index: 2\r\n        },\r\n        {\r\n            hole: 6,\r\n            par: 3,\r\n            index: 10\r\n        },\r\n        {\r\n            hole: 7,\r\n            par: 4,\r\n            index: 4\r\n        },\r\n        {\r\n            hole: 8,\r\n            par: 5,\r\n            index: 16\r\n        },\r\n        {\r\n            hole: 9,\r\n            par: 4,\r\n            index: 14\r\n        },\r\n        {\r\n            hole: 10,\r\n            par: 4,\r\n            index: 7\r\n        },\r\n        {\r\n            hole: 11,\r\n            par: 4,\r\n            index: 13\r\n        },\r\n        {\r\n            hole: 12,\r\n            par: 5,\r\n            index: 15\r\n        },\r\n        {\r\n            hole: 13,\r\n            par: 3,\r\n            index: 9\r\n        },\r\n        {\r\n            hole: 14,\r\n            par: 4,\r\n            index: 3\r\n        },\r\n        {\r\n            hole: 15,\r\n            par: 3,\r\n            index: 17\r\n        },\r\n        {\r\n            hole: 16,\r\n            par: 4,\r\n            index: 11\r\n        },\r\n        {\r\n            hole: 17,\r\n            par: 4,\r\n            index: 1\r\n        },\r\n        {\r\n            hole: 18,\r\n            par: 5,\r\n            index: 5\r\n        }\r\n    ]\r\n}","import React, { useState, useEffect } from 'react';\r\nimport ScorecardView from './ScorecardView';\r\nimport testGolfClub from '../../data/testGolfClub';\r\n\r\nconst Scorecard = () => {\r\n\r\n    let [courseData, setCourseData] = useState(testGolfClub);\r\n    let [playerName, setPlayerName] = useState();\r\n    let [handicap, setHandicap] = useState();\r\n\r\n    useEffect(() => {\r\n        setCourseData({\r\n            ...setCourseData,\r\n            holes: courseData.holes.map((hole, index) => {return {...hole, score: hole.score, points: calculatePoints(hole.score, hole.par, hole.index)}} )\r\n        })\r\n    }, [handicap]);\r\n\r\n    const calculatePoints = (score, par, index) => {\r\n        if(score){\r\n            let hcap = parseInt(handicap);\r\n            let shotsOnHole = 0;\r\n            while(hcap > -18){\r\n                if(parseInt(handicap) >= 0){\r\n                    if(parseInt(index) <= hcap){\r\n                        shotsOnHole++;\r\n                    }\r\n                }else{\r\n                    if(shotsOnHole === 0 && parseInt(index) >= (19 + hcap)){\r\n                        shotsOnHole--;\r\n                    }\r\n                }\r\n                hcap -= 18;\r\n            }\r\n            \r\n            let points = (parseInt(par) + 2) - (parseInt(score) - shotsOnHole);\r\n    \r\n            return points = points < 0 ? 0 : points;\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    const updateScore = (holeIndex, score) => {\r\n        setCourseData({\r\n            ...courseData,\r\n            holes: courseData.holes.map((hole, index) => holeIndex === index ? {...hole, score: score, points: calculatePoints(score, hole.par, hole.index)} : hole)\r\n        });\r\n    }\r\n\r\n    const calculateTotal = (holes, prop) => {\r\n       let total = holes.reduce((total, hole) => {\r\n            let value = parseInt(hole[prop] ? hole[prop] : 0);\r\n            return total + value;\r\n        }, 0);\r\n       return total <= 0 ? \"-\" : total;\r\n    }\r\n\r\n    const onFocus = event => event.target.select();\r\n\r\n    const onChangeHandicap = event => {\r\n        if(!isNaN(event.target.value)){\r\n            let hcap = parseInt(event.target.value);\r\n            if(hcap < -17){\r\n                hcap = -17;\r\n                event.target.value = hcap;\r\n            }else if (hcap > 99){\r\n                hcap = 99;\r\n                event.target.value = hcap;\r\n            }\r\n            setHandicap(hcap);\r\n        }\r\n        setHandicap(event.target.value);\r\n    }\r\n\r\n    const  handleEnter = (event) => {\r\n        if (event.keyCode === 13) {\r\n            const form = event.target.form;\r\n            const index = Array.prototype.indexOf.call(form, event.target);\r\n            form.elements[index + 1].focus();\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    return(\r\n        <ScorecardView \r\n            courseData={courseData}\r\n            handicap={handicap}\r\n            onChangeHandicap={onChangeHandicap}\r\n            playerName={playerName}\r\n            setPlayerName={setPlayerName}\r\n            updateScore={updateScore}\r\n            calculateTotal={calculateTotal}\r\n            onFocus={onFocus}\r\n            handleEnter={handleEnter}\r\n        />\r\n    );\r\n\r\n};\r\n\r\nexport default Scorecard;","import React from 'react';\nimport Scorecard from './components/scorecard/';\n\nfunction App() {\n  return (\n    <div style={{ padding: '5px'}} className=\"App\">\n      <Scorecard />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}